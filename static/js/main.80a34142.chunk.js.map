{"version":3,"sources":["components/Header.Component.js","redux/actions/searchSuggestion.Action.js","components/ListItem.Component.js","components/Content.Component.js","App.js","redux/reducers/appState.js","redux/reducers/utilities.js","redux/reducers/ContentReducer.Reducer.js","redux/reducers/index.js","redux/store/store.js","index.js"],"names":["Header","props","className","addValueToList","value","type","payload","ListItem","dispatch","useDispatch","onClick","AddedListItems","index","Content","useState","searchTerm","setSearchTerm","useSelector","state","appState","list","newSuggestions","onSubmit","e","preventDefault","length","handleSubmit","onChange","target","handleChange","placeholder","map","item","App","suggestions","findSuggestions","suggestionsArray","filter","toLowerCase","includes","removeDuplicateValues","Set","removeItemFromList","_index","contentReducer","initialState","action","persistConfig","key","storage","whitelist","Reducer","combineReducers","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","render","StrictMode","Store","document","getElementById"],"mappings":"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","file":"static/js/main.80a34142.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <nav className='navbar'>\r\n            <button>Search Engine</button>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\n","export const searchSuggestion = (value) => {\r\n    return {\r\n        type: 'SEARCH_SUGGESTIONS',\r\n        payload: value\r\n    }\r\n}\r\n\r\n\r\nexport const addSuggestion = (value) => {\r\n    return {\r\n        type: 'ADD_SUGGESTIONS',\r\n        payload: value\r\n    }\r\n}\r\n\r\nexport const emptyNewSuggestion = () => {\r\n    return {\r\n        type: 'EMPTY_NEWSUGGESTIONS',\r\n    }\r\n}\r\n\r\nexport const addValueToList = (value) => {\r\n    return {\r\n        type: 'ADD_VALUE_TO_LIST',\r\n        payload: value\r\n    }\r\n}\r\n\r\nexport const removeItemFromList = (index) => {\r\n    return {\r\n        type: 'REMOVE_ITEM_FROM_LIST',\r\n        payload: index\r\n    }\r\n}","import React from \"react\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { removeItemFromList, addValueToList } from '../redux/actions/searchSuggestion.Action'\r\n\r\n\r\nexport const ListItem = (props) => {\r\n    const dispatch = useDispatch();\r\n    return <>\r\n        <li onClick={() => dispatch(addValueToList(props.value))} className='list_item'>{props.value}</li>\r\n    </>\r\n}\r\n\r\n\r\n\r\nexport const AddedListItems = (props) => {\r\n    const dispatch = useDispatch();\r\n    return <>\r\n        <span className='list_item added_items'>{props.value} <button onClick={() => dispatch(removeItemFromList(props.index))} className='remove_btn'>X</button></span>\r\n    </>\r\n}","import React, { useState } from \"react\"\r\nimport { ListItem, AddedListItems } from \"./ListItem.Component\";\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { searchSuggestion, addSuggestion, emptyNewSuggestion, addValueToList } from '../redux/actions/searchSuggestion.Action'\r\n\r\n\r\nfunction Content() {\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const dispatch = useDispatch();\r\n    const { list, newSuggestions } = useSelector(state => state.appState)\r\n\r\n    //helper functions\r\n    const handleChange = (e) => {\r\n        dispatch(searchSuggestion(e.target.value))\r\n        setSearchTerm(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (!newSuggestions.length) {\r\n            dispatch(addSuggestion(searchTerm))\r\n        }\r\n        dispatch(addValueToList(searchTerm))\r\n        setSearchTerm('')\r\n        dispatch(emptyNewSuggestion())\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <header className=\"content_header\">\r\n                <h3>TAGS </h3>\r\n                <small>(optional)</small>\r\n            </header>\r\n            <main className='content_main'>\r\n                <form onSubmit={(e) => handleSubmit(e)}>\r\n                    <input value={searchTerm} type=\"search\" onChange={(e) => handleChange(e)} placeholder=\"Start typing and we will make suggestions?\" />\r\n                </form>\r\n                <ul className=\"content_main_suggestion\">\r\n\r\n                    {\r\n                        newSuggestions && newSuggestions.length ? <>\r\n                            {newSuggestions.map((item, index) => <ListItem value={item} index={index} />)}\r\n                        </> : <></>\r\n                    }\r\n                </ul>\r\n            </main>\r\n            <ul className='added_list_items'>\r\n                {list && list.map((item, index) => {\r\n                    return <AddedListItems key={index} value={item} index={index} />\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Content\r\n","import React from 'react';\n// import { Counter } from './features/counter/Counter';\nimport Header from './components/Header.Component';\nimport Content from './components/Content.Component';\n\nfunction App() {\n  return (\n    <div className='app_container'>\n      {/* Header */}\n      <Header />\n      {/* Content */}\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","export const appState = {\r\n    suggestions: [],\r\n    list: []\r\n}","export const findSuggestions = (value, suggestionsArray) => {\r\n    let newSuggestions = [];\r\n    if (value.length) {\r\n        newSuggestions = suggestionsArray.filter(item => item.toLowerCase().includes(value.toLowerCase()));\r\n    }\r\n    return newSuggestions\r\n}\r\n\r\nexport const removeDuplicateValues = (list, value) => {\r\n    let newArray = [];\r\n    newArray = [...new Set([...list, value])]\r\n    return newArray\r\n}\r\n\r\n\r\nexport const removeItemFromList = (list, _index) => {\r\n    let newList = list.filter((item, index) => index !== _index)\r\n    return newList\r\n}","import { appState } from \"./appState\"\r\nimport { findSuggestions, removeDuplicateValues, removeItemFromList } from './utilities'\r\n\r\nconst contentReducer = (initialState = appState, action) => {\r\n    switch (action.type) {\r\n        case 'SEARCH_SUGGESTIONS':\r\n            //operation that return suggestions on change...\r\n            return { ...initialState, newSuggestions: findSuggestions(action.payload, initialState.suggestions) };\r\n        case 'ADD_SUGGESTIONS':\r\n            //operation that return suggestions on change...\r\n            return { ...initialState, suggestions: [...initialState.suggestions, action.payload] };\r\n        case 'EMPTY_NEWSUGGESTIONS':\r\n            return { ...initialState, newSuggestions: [] };\r\n        case 'ADD_VALUE_TO_LIST':\r\n            return { ...initialState, list: removeDuplicateValues(initialState.list, action.payload) };\r\n        case 'REMOVE_ITEM_FROM_LIST':\r\n            return { ...initialState, list: removeItemFromList(initialState.list, action.payload) };\r\n        default:\r\n            return initialState\r\n    }\r\n}\r\n\r\nexport default contentReducer\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport contentReducer from './ContentReducer.Reducer';\r\nimport { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['appState']\r\n}\r\n\r\nconst Reducer = combineReducers({ appState: contentReducer })\r\n\r\nexport default persistReducer(persistConfig, Reducer)","import { createStore, applyMiddleware } from \"redux\";\r\nimport Reducer from \"../reducers/index\";\r\n// import logger from 'redux-logger';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nconst Middleware = [] //logger\r\n\r\nconst store = createStore(Reducer, applyMiddleware(...Middleware))\r\n\r\nexport const persistor = persistStore(store)\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Store from './redux/store/store.js'\nimport { Provider } from 'react-redux';\nimport { persistor } from './redux/store/store'\nimport { PersistGate } from 'redux-persist/integration/react';\nimport '../src/css/style.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={Store}>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate >\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}